process CocoaTest = {
  # test input service, fire 2 events

 untracked PSet maxEvents = { untracked int32 input = 1 }

  source = EmptySource { untracked uint32 firstRun = 1 untracked uint32 numberEventsInRun = 1}

#  source = OptAlignGeneratedSource
#  {
#    untracked uint32 firstRun = 2 
#    untracked uint32 numberEventsInRun = 2
#    untracked int32 maxEvents = 5
#    uint32 numObjects = 4
#    string type="fred"
#  }

  es_source = XMLIdealGeometryESSource 
  {
    vstring geomXMLFiles = {
       "Alignment/CocoaApplication/test/table2DWithMirror.xml"
    }
    string rootNodeName="table2DWithMirror:OCMS"
  }


  es_source = PoolDBESSource {
       PSet DBParameters = {
        }
    VPSet toGet = {
      {string record = "OpticalAlignmentsRcd"
                        string tag = "OpticalAlignments_init"
      }
    }
    bool loadAll = true
   string connect = "sqlite_file:OpticalAlignments.db"
#    string connect = "sqlite_file:Empty.db"
    string timetype = "runnumber" 
    untracked string catalog = "file:conddbcatalog.xml"
    untracked uint32 authenticationMethod = 1
  }


#  this is used for just dumping the event information "raw"
#   module Analysis = EventContentAnalyzer {
#     untracked int32 debugLevel = 1
#     untracked bool verbose =  true 
#   }

 
  service = PoolDBOutputService
  {
                        string connect = "sqlite_file:OpticalAlignmentsOut.db"
                        untracked string catalog = "file:conddbcatalog.xml"
                        string timetype = "runnumber"
                        PSet DBParameters = {
                          untracked string authenticationPath="."
                          untracked int32 messageLevel=0
                          untracked bool loadBlobStreamer = false
                          untracked int32 connectionTimeOut = 600
                          untracked int32 connectionRetrialPeriod = 30
                          untracked int32 connectionRetrialTimeOut = 180
                          untracked bool enableConnectionSharing = false
                          untracked bool enableReadOnlySessionOnUpdateConnection = false
                          untracked bool enablePoolAutomaticCleanUp = true
                        }
#   include "CondCore/DBCommon/data/CondDBCommon.cfi"
 #replace CondDBCommon.connect = "sqlite_file:OpticalAlignmentsOut.db"
 #   replace CondDBCommon.catalog = "file:conddbcatalog.xml"
    VPSet toPut = {
      { 
untracked string containerName = "OpticalAlignments"
       string record = "OpticalAlignments"
        string tag = "OpticalAlignments_init" }
    }
  }
  
  module print = AsciiOutputModule {}
  module alig = CocoaAnalyzer{
    string cocoaDaqRootFile = "cocoaDaqTest.root"
#    string cocoaDaqRootFile = "Alignment_Link_Cocoa.root"
  }

  #provide a scheduler path
  path p1 = { alig } 
  endpath ep = { print }
}

