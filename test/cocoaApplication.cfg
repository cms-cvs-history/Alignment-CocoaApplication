process GeometryTest = {
   # test input service, fire 2 events


   source = EmptySource {untracked int32 maxEvents = 1 untracked uint32 firstRun = 1 untracked uint32 numberEventsInRun = 1}

#   source = OptAlignGeneratedSource
#   {
#     untracked uint32 firstRun = 2 
#     untracked uint32 numberEventsInRun = 2
#     untracked int32 maxEvents = 5
#     uint32 numObjects = 4
#     string type="fred"
#   }


  es_source = XMLIdealGeometryESSource
  {
    vstring geomXMLFiles = {
             "Alignment/CocoaApplication/test/table2DWithMirror.xml"
    }
     string rootNodeName="table2DWithMirror:OCMS"
  }


   es_source = PoolDBESSource { VPSet toGet = {
   	                      {string record = "OpticalAlignmentsRcd"
#       	               {string record = "CSCRSensorsRcd"
                               string tag = "OpticalAlignments_init"
                              } }
		              bool loadAll = true
                              string connect = "sqlite_file:OpticalAlignments.db"
			      string timetype = "runnumber" 
                              untracked string catalog = "file:condbcatalog.xml"
	                      untracked uint32 authenticationMethod = 1
   }


#  this is used for just dumping the event information "raw"
#   module Analysis = EventContentAnalyzer {
#     untracked int32 debugLevel = 1
#     untracked bool verbose =  true 
#   }
	
   module print = AsciiOutputModule {}
   module alig = CocoaAnalyzer{
     string cocoaDaqRootFile = "cocoaDaqTest.root"
  }

	service = PoolDBOutputService{
	  string connect = "sqlite_file:OpticalAlignmentsOut.db"    
          string timetype = "runnumber"    
	  untracked string containerName = "OpticalAlignments"
          string tag ="OpticalAlignments_init"
	  untracked uint32 authenticationMethod = 1
	  untracked string catalog = "file:condbcatalog.xml"
	}

   #provide a scheduler path
   path p1 = { alig } 
   endpath ep = { print }
}

