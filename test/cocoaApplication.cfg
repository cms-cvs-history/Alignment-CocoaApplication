process GeometryTest = {
   # test input service, fire 2 events


   source = EmptySource {untracked int32 maxEvents = 1 untracked uint32 firstRun = 1 untracked uint32 numberEventsInRun = 1}

#   source = OptAlignGeneratedSource
#   {
#     untracked uint32 firstRun = 2 
#     untracked uint32 numberEventsInRun = 2
#     untracked int32 maxEvents = 5
#     uint32 numObjects = 4
#     string type="fred"
#   }

   es_source = XMLIdealGeometryESSource 
   {
    vstring geomXMLFiles = {
             "Alignment/CocoaApplication/test/table2DWithMirror.xml"
    }
     string rootNodeName="table2DWithMirror:OCMS"
   }


include "CondCore/DBCommon/data/CondDBCommon.cfi"
replace CondDBCommon.connect = "sqlite_file:OpticalAlignments.db"    
replace CondDBCommon.catalog = "file:conddbcatalog.xml"
	es_source = PoolDBESSource { 
		  using CondDBCommon
		  VPSet toGet = { { string record = "OpticalAlignmentsRcd" string tag = "OpticalAlignmentTest" } }
	}

#  this is used for just dumping the event information "raw"
#   module Analysis = EventContentAnalyzer {
#     untracked int32 debugLevel = 1
#     untracked bool verbose =  true 
#   }

        block CondDBCommonOut = {
                 string connect = "sqlite_file:OpticalAlignmentsOut.db"
                 untracked string catalog = "file:conddbcatalog.xml"
                        string timetype = "runnumber"
                        PSet DBParameters = {
                          untracked string authenticationPath="."
                          untracked int32 messageLevel=0
                          untracked bool loadBlobStreamer = false
                          untracked bool enableConnectionSharing = true
                          untracked int32 connectionTimeOut = 600
                          untracked int32 connectionRetrialPeriod = 30
                          untracked int32 connectionRetrialTimeOut = 180
                        } 
                     }

       service = PoolDBOutputService{
	   using CondDBCommonOut
 	   VPSet toPut = { { string record = "OpticalAlignmentsRcd" string tag = "OpticalAlignmentOut" } }
        }

   module print = AsciiOutputModule {}
   module alig = CocoaAnalyzer{
     string cocoaDaqRootFile = "cocoaDaqTest.root"
#     string cocoaDaqRootFile = "Alignment_Link_Cocoa.root"
   }

   #provide a scheduler path
   path p1 = { alig } 
   endpath ep = { print }
}

