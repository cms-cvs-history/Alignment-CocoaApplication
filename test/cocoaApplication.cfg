process CocoaTest = {
  # test input service, fire 2 events

#not used, number of events is set in CocoAnalyzer
 untracked PSet maxEvents = { untracked int32 input = 1 }

  source = EmptySource { untracked uint32 firstRun = 1 untracked uint32 numberEventsInRun = 1}

#  source = OptAlignGeneratedSource
#  {
#    untracked uint32 firstRun = 2 
#    untracked uint32 numberEventsInRun = 2
#    untracked int32 maxEvents = 5
#    uint32 numObjects = 4
#    string type="fred"
#  }

  es_source = XMLIdealGeometryESSource 
  {
    vstring geomXMLFiles = {
       "Alignment/CocoaApplication/test/table2DWithMirror.xml"
    }
    string rootNodeName="table2DWithMirror:OCMS"
  }


  include "CondCore/DBCommon/data/CondDBCommon.cfi"
#  replace CondDBCommon.connect = "sqlite_file:OpticalAlignments.db"    

  es_source = PoolDBESSource { 
	 untracked string timetype = "timestamp"
  string connect = "sqlite_file:OpticalAlignments.db"
                        PSet DBParameters = {
                          untracked string authenticationPath="."
                          untracked int32 messageLevel=0
                          untracked int32 connectionTimeOut = 60
                          untracked int32 connectionRetrialPeriod = 10
                          untracked int32 connectionRetrialTimeOut = 60
                          untracked bool enableConnectionSharing = true
                          untracked bool enableReadOnlySessionOnUpdateConnection = false
                          untracked bool enablePoolAutomaticCleanUp = false
                          untracked int32 idleConnectionCleanupPeriod = 10
                        }
#using CondDBCommon
    string connect = "sqlite_file:OpticalAlignments.db"
    VPSet toGet = { { string record = "OpticalAlignmentsRcd" string tag = "OpticalAlignmentTest" } }
  }


#  this is used for just dumping the event information "raw"
#   module Analysis = EventContentAnalyzer {
#     untracked int32 debugLevel = 1
#     untracked bool verbose =  true 
#   }

 
  service = PoolDBOutputService
  {
#    using CondDBCommon
    string connect = "sqlite_file:OpticalAlignmentsOut.db"
	 untracked string timetype = "timestamp"
                        PSet DBParameters = {
                          untracked string authenticationPath="."
                          untracked int32 messageLevel=0
                          untracked int32 connectionTimeOut = 60
                          untracked int32 connectionRetrialPeriod = 10
                          untracked int32 connectionRetrialTimeOut = 60
                          untracked bool enableConnectionSharing = true
                          untracked bool enableReadOnlySessionOnUpdateConnection = false
                          untracked bool enablePoolAutomaticCleanUp = false
                          untracked int32 idleConnectionCleanupPeriod = 10
                        }
    untracked string catalog = "file:conddbcatalog.xml"
    untracked uint32 authenticationMethod = 1
    VPSet toPut = {
        { untracked string containerName = "OpticalAlignments"
          string record = "OpticalAlignmentsRcd"    string tag = "CocoaOpticalAlignments" },
        {  untracked string containerName = "Alignments"
 string record = "DTAlignmentRcd"       string tag = "CocoaDTAlignments" },
        { string record = "DTAlignmentErrorRcd"  string tag = "CocoaDTAlignmentErrors" },
        { string record = "CSCAlignmentRcd"      string tag = "CocoaCSCAlignments" },
        { string record = "CSCAlignmentErrorRcd" string tag = "CocoaCSCAlignmentErrors" }
     }

  }

  
  module print = AsciiOutputModule {}
  module alig = CocoaAnalyzer{
     string cocoaDaqRootFile = "cocoaDaqTest.root"
     int32 maxEvents = 3
  }

  #provide a scheduler path
  path p1 = { alig } 
  endpath ep = { print }
}

